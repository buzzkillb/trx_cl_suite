#####################################
### Issues / errors in processing ###
#####################################

I19: 09Oct2016, svn:
====================
I think the maximum size of a trx is 100 kb. How many trx does that make? 
How can this be implemented?
--> minimum signature is ~50 Bytes, prev trx = 32 Bytes + PKScript 20 Bytes plus, plus, plus... so a minimum trx is roughly 227 Bytes. This would limit to ~440 particular trx? And if a trx has many inputs and many outputs?

trx validation:
https://en.bitcoin.it/wiki/Protocol_rules#.22tx.22_messages
    Check syntactic correctness
    Make sure neither in or out lists are empty
    Size in bytes <= MAX_BLOCK_SIZE (or as above, 100k max?)
    Each output value, as well as the total, must be in legal money range
    Make sure none of the inputs have hash=0, n=-1 (coinbase transactions)
    Check that nLockTime <= INT_MAX[1], size in bytes >= 100[2], and sig opcount <= 2[3]
    Reject "nonstandard" transactions: scriptSig doing anything other than pushing numbers on the stack, or scriptPubkey not matching the two usual forms[4]
    Reject if we already have matching tx in the pool, or in a block in the main branch
    For each input, if the referenced output exists in any other tx in the pool, reject this transaction.[5]
    For each input, look in the main branch and the transaction pool to find the referenced output transaction. If the output transaction is missing for any input, this will be an orphan transaction. Add to the orphan transactions, if a matching transaction is not in there already.
    For each input, if the referenced output transaction is coinbase (i.e. only 1 input, with hash=0, n=-1), it must have at least COINBASE_MATURITY (100) confirmations; else reject this transaction
    For each input, if the referenced output does not exist (e.g. never existed or has already been spent), reject this transaction[6]
    Using the referenced output transactions to get input values, check that each input value, as well as the sum, are in legal money range
    Reject if the sum of input values < sum of output values
    Reject if transaction fee (defined as sum of input values minus sum of output values) would be too low to get into an empty block
    Verify the scriptPubKey accepts for each input; reject if any are bad
    Add to transaction pool[7]
    "Add to wallet if mine"
    Relay transaction to peers
    For each orphan transaction that uses this one as one of its inputs, run all these steps (including this one) recursively on that orphan


I26: 19Oct2016, svn:
====================
use a config file, having default values like:
min_trxfee=50
max_trx_size=100 # kilobytes
SIG_MIN_LENGTH_CHARS=18
SIG_MAX_LENGTH_CHARS=146
...
--> apr2017: already in use for tcls_create.sh

I27: 25Oct2016, svn:
====================
trx_sign.sh: 
STEP 17: when there is a trx with multiple output, need to create a loop
---> this can be closed, see item #52

I33: 05Nov2016, svn:
====================
tcls_sign.sh or tcls_key2pem.sh: is this missing ?
https://github.com/KittehOrg/KittehIRCClientLib/issues/45
compressed/uncompressed pubkeys (begin with 0x02 or 0x03):
Example 1, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:aa:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e0:
  41:ba:3e:21:6d
Find last byte from Y co-ordinate, LSB is set:
0x6D (to binary) => 0b1101101 (extracting LSB) => 0b00000011 
Compressed form of above needs to start with 0x03:
  03:3d:b3:20:74:a1:91:b2:d7:e7:cc:8e:5d:b3:2c:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3

Example 2, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:27:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e2:
  f1:ba:2b:31:a6
Find last byte from Y co-ordinate, LSB is not set:
0xA6 => 0b10100110 => 0b00000010 
Compressed form of above needs to start with 0x02:
  02:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51


I38: 16nov2016, svn:
====================
tcls_key2pem: the assembly of the pubkey can be made very easy, in this section:
######################################
### manually setup a second pubkey ### 
######################################

instead of base64, use openssl:
   openssl enc -base64 -in tmp_key2pem >> pubkey_m.pem
this?
   xxd -r -p <pubkey.txt | openssl pkey -pubin -inform der >pubkey.pem
without xxd it might become slightly different...
   cat pubkey.hex | openssl pkey -pubin -inform der >pubkey.pem


I39: 16nov2016, svn:
====================
Gerade in Schleifen sind immer neu gestartete Unterprozesse für jede Menge Ressourcenverbrauch verantwortlich. Ein kurzer Benchmark durchsuchte knapp 3 300 Dateien nach einem Suchstring. Die Variante in Listing 2 braucht daher 3 300 Prozesse mehr als die kürzere Variante in Listing 3. Das zweite Skript benötigte 88 Prozent mehr Laufzeit als das erste. Hängt man hinten an die Pipe ein weiteres, nutzloses »| cat« an, so dauert dies 153 Prozent länger als ein einzelnes »grep«. Zwei solche Aufrufe benötigen schon zusätzliche 239 Prozent und dreimal »cat« schlägt mit einer Zugabe von gesalzenen 322 Prozent zu Buche. Die letzteren Werte leiden überdurchschnittlich an den begrenzten Ressourcen auf dem Testrechner und lasten ihn vollständig aus. Dennoch zeigt das durchaus praxisnahe Beispiel, dass sich zusätzliche Prozesse erheblich im Schleifenrumpf auswirken.

Listing 2: Suche mit »cat«
01 #!/bin/bash
02 find $HOME/Artikel/2009/1* -type f |
03 while read i
04 do
05     cat "$i" | grep bashing > /dev/null
06 done

Listing 3: Suche ohne »cat«
01 #!/bin/bash
02 find $HOME/Artikel/2009/1* -type f |
03 while read i
04 do
05     grep bashing "$i" > /dev/null
06 done


I40: 16nov2016, svn:
====================
tcls_key2pem: we are currently checking only negative S-values, the original bitcoin cpp code (master/src/script/interpreter.cpp) avoids negative numbers for R and S. 
--> need to add negative R-Check as well ...


I41: 14dec2016, svn:
====================
tcls_*.sh:
it is generally not a good idea, to have capital letters as variable names in shell scripts. They might interfere with shell variables! 
Maybe rework all *.sh files - low priority...


I42: 16nov2016, svn:
====================
make a copy of wallet and priv keys from SuSE cold and from Mac Bitcoin client into new virtual machine, to see that copying of wallets works well ...


I43: 20dec2016, svn:
====================
tcls_create.sh: 
### TX_IN: call STEP 3-7 ###
...
# if only prev_TX is given, we could fetch remaining items with 'get_trx_values' ?
--> assume we have -f and -t, then we can read values from network?   


I44: 25dec2016, svn:
====================
tcls_base58check_enc.sh
add testcase file for all testcases in the file "Address_Generation_Test.txt" in the Bitcoin directory. Each line is a step of the key conversion, beginning with priv key, then pubkey, then sha and so on... until base58 encoded Bitcoin address... like this:
./tcls_base58check_enc.sh -v -p2pk 047747ECECEB2C6692D6CEAAF4A11ED9DB900741730C201F95B8A4EEF20D7DEE2CDEC2802C6EDC880BEE41E9D114A8708260D01AB107B5177DECB4E109C5479223 | grep "^ " | tail -n 9


I45: 26dec2016, svn:
====================
tcls_sign.sh
add some testcases based on priv keys from file "Address_Generation_Test.txt" in the Bitcoin directory. The  file contains priv and pub keys ... 


I46: 04jan2017, svn:
====================
Can I build a transaction review of prev trx? The tree looks like this (left to right):

prev trx      TRX2          TRX1       my wallet
=================================================
Input 1 \
Input 2 ----- UTXO --\
Input 3 /             \
                       ---- UTX0 ----> 1JBM...68m 
                      /
Input 4 ----- UTXO --/


I47: 20mar2017, svn:
====================
beautify output of tcls_trx2txt.sh: similiar to the way, the tree output is done in the "dot profile" alias:
alias tree="find ./ -print | sed -e 's;[^/]*/; /;g;s;/ ;    ;g;s;^ /$;.;;s; /;|-- ;g'"


I49: 27mar2017, svn:
====================
maybe an idea for the future:
A high level algorithm for processing payments on a website via RPC/cli

Say, I'll have a python script. Do I understand correctly, that I'll have to call these:
1) getnewaddress
2) getreceivedbyaddress
That is, I won't need the "gettransaction" and "listreceivedbyaddress" calls.

Getnewaddress sounds sensible and I use that too.
I use bitcoin.conf notifications to trigger the events however to later query the values using getTransaction
e.g. when a new tx arrives it runs the script to make sure I'm aware there are incoming funds.
When a new block is found it verifies the confirmations of those tx's to know if we can be sure it has been received safely.
TX malleability is something to be aware of though, it's what I lose sleep over because I'm not sure how to easily test this.
Your approach with get received by address is probably fine, keep us posted how it goes.
Triggers: There are two options blocknotify and wallet notify I think it is. You can put a shell command as a parameter to invoke php, node or python script.

---> no, for a webpage with an address it is better to use HD wallets: 
Hierarchical Deterministic Wallets (BIP0032/BIP0044)
q: how many public/private keypairs can a 24 word hierarchical deterministic wallet produce?
a: 2^31, the number of words in the mnemonic has nothing to do with the capacity, it just adjusts the entropy for the key derivation


I51: 02apr2017, svn:
====================
testcases_tcls_verify_sig.sh: on OpenBSD the testcase 4 fails ...


I52: 03apr2017, svn:
====================
tcls_sign.sh: is TX_OUT handled correctly? Looks like there is only one TX_OUT possible?
what happens, when we create a TX, which has a return address?
what happens, when we create a TX, which has many TX-OUTs?


I55: 07apr2017, svn:
====================
testcases_tcls_sign.sh: 
Testcase 10i (?) in testcases_tcls_create.sh shall be reflected in "tcls_sign.sh", with the same input values, and then signed. The example to compare is here:
    https://gist.githubusercontent.com/gavinandresen/3966071/raw/
    1f6cfa4208bc82ee5039876b4f065a705ce64df7/TwoOfThree.sh



I56: 23jun2017, svn:
====================
tcls_sign.sh: when a tx has more than 100 utxo, the signing process creates an error roughly every 2nd attempt. Looks like this happens for signatures, where a new S-Value must be calculated. The new S-value should be less then N/2. The system creates a new S value, but it's length is then 63 bytes, instead of 64 bytes.


I57: 27jun2017, svn:
====================
OpenBSD and ./tcls_testcases_verify.sh
TESTCASE 4:
./tcls_testcases_verify.sh[234]: xxd: not found
unable to load Public Key
./tcls_testcases_verify.sh[234]: xxd: not found
./tcls_testcases_verify.sh[234]: xxd: not found
unable to load Public Key
Error initializing context


I58: 20jul2017, svn:
====================
P2SH scripts - length limitations:
https://bitcoin.stackexchange.com/questions/38937/what-was-the-original-rationale-for-limiting-the-maximum-push-size


I59: Segwit :-)
===============
https://bitcoincore.org/en/segwit_wallet_dev/
integrate segwit into tcls_tx2txt.sh, e.g. this tx:
https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki
Native P2WPKH:
==============
01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000
which converts to:
    nVersion:  01000000
    marker:    00
    flag:      01
    txin:      02 fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f 00000000 494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01 eeffffff
                  ef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a 01000000 00 ffffffff
    txout:     02 202cb20600000000 1976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac
                  9093510d00000000 1976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac
    witness    00
               02 47304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01 21025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357
    nLockTime: 11000000


on https://bitcointalk.org/index.php?topic=1398994.0;all:
by: Achow101, March 16, 2016, 08:04:51 PM
a normal client would see this tx as:
0100000002fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac11000000


P2SH-P2WPKH:
============
01000000000101db6b1b20aa0fd7b23880be2ecbd4a98130974cf4748fb66092ac4d3ceb1a5477010000001716001479091972186c449eb1ded22b78e40d009bdf0089feffffff02b8b4eb0b000000001976a914a457b684d7f0d539a46a45bbc043f35b59d0d96388ac0008af2f000000001976a914fd270b1ee6abcaea97fea7ad0402e8bd8ad6d77c88ac02473044022047ac8e878352d3ebbde1c94ce3a10d057c24175747116f8288e5d794d12d482f0220217f36a485cae903c713331d877c1f64677e3622ad4010726870540656fe9dcb012103ad1d8e89212f0b92c74d23bb710c00662ad1470198ac48c43f7d6f93a2a2687392040000
Native P2WSH:
=============
01000000000102fe3dc9208094f3ffd12645477b3dc56f60ec4fa8e6f5d67c565d1c6b9216b36e000000004847304402200af4e47c9b9629dbecc21f73af989bdaa911f7e6f6c2e9394588a3aa68f81e9902204f3fcf6ade7e5abb1295b6774c8e0abd94ae62217367096bc02ee5e435b67da201ffffffff0815cf020f013ed6cf91d29f4202e8a58726b1ac6c79da47c23d1bee0a6925f80000000000ffffffff0100f2052a010000001976a914a30741f8145e5acadf23f751864167f32e0963f788ac000347304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac00000000
P2SH-P2WSH 6-of-6 multisig witness:
===================================
0100000000010136641869ca081e70f394c6948e8af409e18b619df2ed74aa106c1ca29787b96e0100000023220020a16b5755f7f6f96dbd65f5f0d6ab9418b89af4b1f14a1bb8a09062c35f0dcb54ffffffff0200e9a435000000001976a914389ffce9cd9ae88dcc0631e88a821ffdbe9bfe2688acc0832f05000000001976a9147480a33f950689af511e6e84c138dbbd3c3ee41588ac080047304402206ac44d672dac41f9b00e28f4df20c52eeb087207e8d758d76d92c6fab3b73e2b0220367750dbbe19290069cba53d096f44530e4f98acaa594810388cf7409a1870ce01473044022068c7946a43232757cbdf9176f009a928e1cd9a1a8c212f15c1e11ac9f2925d9002205b75f937ff2f9f3c1246e547e54f62e027f64eefa2695578cc6432cdabce271502473044022059ebf56d98010a932cf8ecfec54c48e6139ed6adb0728c09cbe1e4fa0915302e022007cd986c8fa870ff5d2b3a89139c9fe7e499259875357e20fcbb15571c76795403483045022100fbefd94bd0a488d50b79102b5dad4ab6ced30c4069f1eaa69a4b5a763414067e02203156c6a5c9cf88f91265f5a942e96213afae16d83321c8b31bb342142a14d16381483045022100a5263ea0553ba89221984bd7f0b13613db16e7a70c549a86de0cc0444141a407022005c360ef0ae5a5d4f9f2f87a56c1546cc8268cab08c73501d6b3be2e1e1a8a08824730440220525406a1482936d5a21888260dc165497a90a15669636d8edca6b9fe490d309c022032af0c646a34a44d1f4576bf6a4a74b67940f8faa84c7df9abe12a01a11e2b4783cf56210307b8ae49ac90a048e9b53357a2354b3334e9c8bee813ecb98e99a7e07e8c3ba32103b28f0c28bfab54554ae8c658ac5c3e0ce6e79ad336331f78c428dd43eea8449b21034b8113d703413d57761b8b9781957b8c0ac1dfe69f492580ca4195f50376ba4a21033400f6afecb833092a9a21cfdf1ed1376e58c5d1f47de74683123987e967a8f42103a6d48b1131e94ba04d9737d61acdaa1322008af9602b3b14862c07a1789aac162102d8b661b0b3302ee2f162b09e07a55ad5dfbe673a9f01d9f0c19617681024306b56ae00000000

or:
0200000000010129b0f742d41c6aad58dd0e779ca53b8bed1790465ed59ed20d2b6a3ecc6744920100000000ffffffff0178cdf5050000000016001443aac20a116e09ea4f7914be1c55e4c17aa600b702483045022100e8877e9351abcfc5dc20a9c9f55d7bcde8d64993d135a20568b5b8628ea3f7b102203801629aad6a7ec0960b4d830aedac673d620179753cc6f197eaed866a4959ba012103335134d7414e1d1a154600b124a96f5ef2c6ca21434d2622469a96bd5262fd5600000000

or:
02000000021a81aa94d50686201482a7b286f9c8674139741660651b4cd5260ea5a360fdb8000000006a473044022063dc53dde52373c78ea8587b637b2ee6004a42cddbadd955122a8112dd08c89302206af141ce61d9d8ec4a2cce4e18ba0bf72af72d14de8a8219f79ceabd41dac083012103ce73e9e5cc14b9e79d6499848c509ff8333a586d382d76977336433a3730df50ffffffff98b05fc2c7efb14881b4e857f5157e81dc1f368e4dd0b214b44fbff4b1d4b7c4060000006a4730440220675694dad5d78a327e907219acdb176b97fc316b99819096c4f76affc06efd1d022009270cf2499ab267640fb8c7cbb837a64f9e79df4242e08cda08a43ef5e9510b012103aaaec8de9f04cd8fef32301dd99c6a1c85440774c0b77354c2d58e70972f23afffffffff0120a1070000000000220020cdbf909e935c855d3e8d1b61aeb9c5e3c03ae8021b286839b1a72f2e48fdba7000000000


I60: tcls_tx2txt.sh
===================
an all "if Verbose=1" against v_output or vv_output


I61: tcls_testcases for OP_RETURN
=================================
https://blockchain.info/tx/52dd20f60d6e14e5a783e7668cf410efdea40cd9a92479b0f2423d0bc63575fa?format=hex
010000000497d674af7ee7ff260c97ea49b7e56af223b23b40c129d48dbc06f7699b8c0c10000000006a47304402200914ca252b405e15b6a8f851e7aa5f06c05c1fc45ec2ab689a5c51533ed9d24102203de2eaf764d9ab3e0be57fdfcd22b558ff4f97aa8360fc9fad66c6abb91e31fc01210346da7048693f5298ea25302b23fd055f398f7b75c8acf0ab14969626abfc5f65fdffffffe22c4ef49bc6ee2ba1796d830bf879aa097c1809d50bb85af9113ee0b77a1aae010000006b483045022100c2e495935d52d466e80f0e6e93a38e4894a4f5a460a6488067d335bd236bd454022035f6d6f563fa820861d5cbc121ad2c2a744579465bc40f23b9afb4ca0af63d820121032dfe039d446aad7bee4618b0901ca95ae2175341109c544c46e445cfbb4ccbebfdffffff13144a1b23e73d4ed199b088e32669ca6095ee5e69c8df79d467b57d63c480f4000000006a4730440220652a21b3b7a23c9e531cc402d931c0638acfcbcb9d37b4a337c1eeb17c497f6d022075e5c5d5889ac20904723dc577fe9e3bcff2318bf73756b50c202c36ae197edc0121020e79e918da434349d8d23833ee86602ac67876707c99d8e0d0b02d45ac743542fdfffffff4fec9407cac82d9af986086c58f8dba08ad31f830f4fa54b87f4df877748db6000000006a47304402206270cd4cbd03ab14b5e652ed166afefb2036060e6473072720e27a4e7ca1119e022001c1cd35e6abae76ddaee19a1a94c7536723c6756f0e7903270a60c5e5dda55c0121024dc7a33dd3e4bc7677cabc456fbdc12775cd935d8823ccea1df4cf9aa2420668fdffffff0300000000000000000a6a084655434b20544544c0c6aa00000000001976a9145e23945aba9037f323717057cb91e7d8c37793b688acebec0c00000000001976a91456e526ec441f466a7a3ef46dab98e9dcc05b89b088ac00000000

https://blockchain.info/tx/728e24b2e7dd137e574c433a8db08ac2aa0bf0588ad7716e4c5a7da45dbb5933?format=hex
010000000152297af618c1450d0f521d6b11e71a7879d0b387b9d6344bc92822ac6c58562b010000006a473044022049e517546b4c839f9d4d9db74d3e86400273bc95b484c50f5e896e4470752c50022034e58bceab2dbf45dd2b4dcca7c1bdd6e603beac59fe6e60bff12d35f4f0f7aa01210252bc988a7ae4d13339946ecad63bc492badb869e7e0307b864eed7941b8b5119fdffffff0200000000000000004c6a4a40434f5059524f424f4037333839643664313135313465633035636335663135656236353932383630383430343733346230343932636132656364396564343837326230343265666137d10d0a00000000001976a914aa6b881fa1c7f6dbc95d714bfd5100bf56bb940388ac00000000

https://blockchain.info/tx/d276abe15791941649c3ca8425d79167cc1cf801f83aa99753fe7f42740c0f23?format=hex
0100000001d0e67013c4c8512cb7e4cfbb64bcea38d854cab6db36b6af0113109ce489ee7201000000fdfd000048304502210096df80136e578ce721589d61cb2efcf5e4748c6a3a6ab7e34d0fc12e3e748e2c02201049e22331794a5d99856105b096e3adb60b053562ad40ef6fe28b8bb70ca8f40147304402203f49e5198e7b14aeb59c26dc42a4207ede9d0d4a291e2ae6f2eb1809fbdba21a022030e74e63e752296499e18f772e00d26c206972029f3b8c0b7d50298a1734241f014c69522103459d20315debcb8b4c47c5f0ff356c7764ea3b103487487a1ed2bbcac3f18bc221023b0fd344dbd13d25663adc5a31d269ceac90b6dfc3ac8af8d5b31aa10ba366fc21032233fc2b5916568cd5177e9b88feda049195418cbadb2c6741e8df8967ec84ab53aeffffffff030000000000000000106a0e69643a64616e6f6d6172722e69647c150000000000001976a9146ada8b2f3ce136abedd949e749ccf5574d867d5b88ac557d0c000000000017a9148e1719fb937c598ddd0760118b5455fc4f31891b8700000000





#####################################
### Extensions / new Requirements ###
#####################################
E1: Testnet
===============
can it be extended for usage in testnet?

E2: MultiSig
===============
For important values: make use of a 2of3 multisig with one in cold storage
generate 3 addresses (and 3 private keys) A, B & C... and 
create 1 multisig address (D) using those 3 in a 2-of-3 configuration

the multisig address starts with a "3", all the others (A,B & C) should be "1". 
send funds into the multisig address D (starts with a "3")... 
make sure all the private keys for your A, B & C addresses are all backed up/stored independently of each other. 
to take funds out of D, create a transaction using one of A,B or C.. and then co-sign the transaction using one of the other addresses.

file:///Data/BitCoin/Bitcoin_multisig_the_hard_way_P2SH.html


E3: Sending
===============
can a signed trx be sent to the net without tools?
--> https://bitcointalk.org/index.php?topic=1043518.0
curl -X POST -d tx=010000000158891e8f28100642464417f53845c3953a43e31b35d061bdbf6ca3a64fffabb8000000008c493046022100a9d501a6f59c45a24e65e5030903cfd80ba33910f24d6a505961d64fa5042b4f02210089fa7cc00ab2b5fc15499fa259a057e6d0911d4e849f1720cc6bc58e941fe7e20141041a2756dd506e45a1142c7f7f03ae9d3d9954f8543f4c3ca56f025df66f1afcba6086cec8d4135cbb5f5f1d731f25ba0884fc06945c9bbf69b9b543ca91866e79ffffffff01204e0000000000001976a914d04b020dab70a7dd7055db3bbc70d27c1b25a99c88ac00000000 https://blockchain.info/pushtx
also:
https://github.com/laanwj/bitcoin-submittx


E4: creating priv/pub keypairs
===============================
create a priv/pubkey pair using arcrandom on OpenBSD?
similiar to "bitcoin_tools.sh" ?


E5: Steganography
=================
http://incoherency.co.uk/blog/stories/steganographic-bitcoin-seeds.html


E6: BIP39
=========
https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki

E7: SEGWIT
==========
a:) be able to read and decode segwit tx
b:) make the "wallet" segwit compliant:
https://bitcoincore.org/en/segwit_wallet_dev/



