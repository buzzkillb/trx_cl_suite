#####################################
### Issues / errors in processing ###
#####################################

I19: 09Oct2016, svn:
====================
I think the maximum size of a trx is 100 kb. How many trx does that make? 
How can this be implemented?
--> minimum signature is ~50 Bytes, prev trx = 32 Bytes + PKScript 20 Bytes plus, plus, plus... so a minimum trx is roughly 227 Bytes. This would limit to ~440 particular trx? And if a trx has many inputs and many outputs?

trx validation:
https://en.bitcoin.it/wiki/Protocol_rules#.22tx.22_messages
    Check syntactic correctness
    Make sure neither in or out lists are empty
    Size in bytes <= MAX_BLOCK_SIZE (or as above, 100k max?)
    Each output value, as well as the total, must be in legal money range
    Make sure none of the inputs have hash=0, n=-1 (coinbase transactions)
    Check that nLockTime <= INT_MAX[1], size in bytes >= 100[2], and sig opcount <= 2[3]
    Reject "nonstandard" transactions: scriptSig doing anything other than pushing numbers on the stack, or scriptPubkey not matching the two usual forms[4]
    Reject if we already have matching tx in the pool, or in a block in the main branch
    For each input, if the referenced output exists in any other tx in the pool, reject this transaction.[5]
    For each input, look in the main branch and the transaction pool to find the referenced output transaction. If the output transaction is missing for any input, this will be an orphan transaction. Add to the orphan transactions, if a matching transaction is not in there already.
    For each input, if the referenced output transaction is coinbase (i.e. only 1 input, with hash=0, n=-1), it must have at least COINBASE_MATURITY (100) confirmations; else reject this transaction
    For each input, if the referenced output does not exist (e.g. never existed or has already been spent), reject this transaction[6]
    Using the referenced output transactions to get input values, check that each input value, as well as the sum, are in legal money range
    Reject if the sum of input values < sum of output values
    Reject if transaction fee (defined as sum of input values minus sum of output values) would be too low to get into an empty block
    Verify the scriptPubKey accepts for each input; reject if any are bad
    Add to transaction pool[7]
    "Add to wallet if mine"
    Relay transaction to peers
    For each orphan transaction that uses this one as one of its inputs, run all these steps (including this one) recursively on that orphan


I26: 19Oct2016, svn:
====================
start to think about a config file, having default values like:
min_trxfee=50
max_trx_size=100 # kilobytes
SIG_MIN_LENGTH_CHARS=18
SIG_MAX_LENGTH_CHARS=146
...

I27: 25Oct2016, svn:
====================
trx_sign.sh: 
STEP 5:  need to do a var_int check here ...
STEP 8:  need to do a var_int check here ...
STEP 17: when there is a trx with multiple output, need to create a loop

I30: 04Nov2016, svn:
====================
Integrate the PIZZA Transaction into all testcases:
https://blockchain.info/rawtx/cca7507897abc89628f450e8b1e0c6fca4ec3f7b34cccf55f3f531c659ff4d79
http://bitcoin.stackexchange.com/questions/32305/how-does-the-ecdsa-verification-algorithm-work-during-transaction/32308#32308

testcases_trx_2txt.sh
? testcases_tcls_create.sh - it has two outputs, not yet ready ...
? testcases_tcls_sign.sh   - I don't have the priv keys, how to?
testcases_tcls_verify_sig.sh	

I33: 05Nov2016, svn:
====================
is this missing in sign.sh or key2pem.sh?
https://github.com/KittehOrg/KittehIRCClientLib/issues/45
compressed/uncompressed pubkeys (begin with 0x02 or 0x03):
Example 1, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:aa:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e0:
  41:ba:3e:21:6d
Find last byte from Y co-ordinate, LSB is set:
0x6D (to binary) => 0b1101101 (extracting LSB) => 0b00000011 
Compressed form of above needs to start with 0x03:
  03:3d:b3:20:74:a1:91:b2:d7:e7:cc:8e:5d:b3:2c:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3

Example 2, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:27:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e2:
  f1:ba:2b:31:a6
Find last byte from Y co-ordinate, LSB is not set:
0xA6 => 0b10100110 => 0b00000010 
Compressed form of above needs to start with 0x02:
  02:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51


I34: 08Nov2016, svn:
====================
tcls_sign.sh (and others): TRX_IN[i] shall always start with "0", like in script trx_2txt.sh

I35: 09Nov2016, svn:
====================
update readme.md files and description and usage …


I38: 16nov2016, svn:
====================
tcls_key2pem: the assembly of the pubkey can be made very easy, in this section:
######################################
### manually setup a second pubkey ### 
######################################

instead of base64, use openssl:
   openssl enc -base64 -in tmp_key2pem >> pubkey_m.pem
this?
   xxd -r -p <pubkey.txt | openssl pkey -pubin -inform der >pubkey.pem
without xxd it might become slightly different...
   cat pubkey.hex | openssl pkey -pubin -inform der >pubkey.pem

I39: 16nov2016, svn:
====================
Gerade in Schleifen sind immer neu gestartete Unterprozesse für jede Menge Ressourcenverbrauch verantwortlich. Ein kurzer Benchmark durchsuchte knapp 3 300 Dateien nach einem Suchstring. Die Variante in Listing 2 braucht daher 3 300 Prozesse mehr als die kürzere Variante in Listing 3. Das zweite Skript benötigte 88 Prozent mehr Laufzeit als das erste. Hängt man hinten an die Pipe ein weiteres, nutzloses »| cat« an, so dauert dies 153 Prozent länger als ein einzelnes »grep«. Zwei solche Aufrufe benötigen schon zusätzliche 239 Prozent und dreimal »cat« schlägt mit einer Zugabe von gesalzenen 322 Prozent zu Buche. Die letzteren Werte leiden überdurchschnittlich an den begrenzten Ressourcen auf dem Testrechner und lasten ihn vollständig aus. Dennoch zeigt das durchaus praxisnahe Beispiel, dass sich zusätzliche Prozesse erheblich im Schleifenrumpf auswirken.

Listing 2: Suche mit »cat«
01 #!/bin/bash
02 find $HOME/Artikel/2009/1* -type f |
03 while read i
04 do
05     cat "$i" | grep bashing > /dev/null
06 done

Listing 3: Suche ohne »cat«
01 #!/bin/bash
02 find $HOME/Artikel/2009/1* -type f |
03 while read i
04 do
05     grep bashing "$i" > /dev/null
06 done


I40: 16nov2016, svn:
====================
tcls_key2pem: we are currently checking only negative S-values, the original bitcoin cpp code (master/src/script/interpreter.cpp) avoids negative numbers for R and S. 
--> need to add negative R-Check as well ...

I41: 14dec2016, svn:
====================
it is generally not a good idea, to have capital letters as variable names in shell scripts. They might interfere with shell variables! 
Maybe rework all *.sh files - low priority…


I42: 16nov2016, svn:
====================
make a copy of wallet and priv keys from SuSE cold and from Mac Bitcoin client into new virtual machine, to see that copying of wallets works well ...


I43: 20dec2016, svn:
====================
tcls_create.sh: 
### TX_IN: call STEP 3-7 ###
...
# if only prev_TX is given, we could fetch remaining items with 'get_trx_values' ?
--> assume we have -f and -t, then we can read values from network?   




#####################################
### Extensions / new Requirements ###
#####################################
E1: Testnet
===============
can it be extended for usage in testnet?

E2: MultiSig
===============
For important values: make use of a 2of3 multisig with one in cold storage
generate 3 addresses (and 3 private keys) A, B & C... and 
create 1 multisig address (D) using those 3 in a 2-of-3 configuration

the multisig address starts with a "3", all the others (A,B & C) should be "1". 
send funds into the multisig address D (starts with a "3")... 
make sure all the private keys for your A, B & C addresses are all backed up/stored independently of each other. 
to take funds out of D, create a transaction using one of A,B or C.. and then co-sign the transaction using one of the other addresses.

E3: Sending
===============
can a signed trx be sent to the net without tools?
--> https://bitcointalk.org/index.php?topic=1043518.0
curl -X POST -d tx=010000000158891e8f28100642464417f53845c3953a43e31b35d061bdbf6ca3a64fffabb8000000008c493046022100a9d501a6f59c45a24e65e5030903cfd80ba33910f24d6a505961d64fa5042b4f02210089fa7cc00ab2b5fc15499fa259a057e6d0911d4e849f1720cc6bc58e941fe7e20141041a2756dd506e45a1142c7f7f03ae9d3d9954f8543f4c3ca56f025df66f1afcba6086cec8d4135cbb5f5f1d731f25ba0884fc06945c9bbf69b9b543ca91866e79ffffffff01204e0000000000001976a914d04b020dab70a7dd7055db3bbc70d27c1b25a99c88ac00000000 https://blockchain.info/pushtx

