#####################################
### Issues / errors in processing ###
#####################################

I10: 18jul16 svn:
==================
testcases_trx2txt.sh: testcase 20 fails on OpenBSD, cause parameter buffer is only 2048 Bytes

I14: 30jul16, svn:
==================
try cold storage with this: 1JmPRD_unspent.txt

I16: 31jul16, svn:
==================
testcases_trx_2txt.sh: testcase 9 on OpenBSD failes this way:
need to take care for buffering input?
TESTCASE 9c: 
cut: [-bcf] list: 2072 too large (max 2048)
cut: [-bcf] list: 2080 too large (max 2048)
cut: [-bcf] list: 2082 too large (max 2048)
...

I19: 09Oct2016, svn:
====================
I think the maximum size of a trx is 100 kb. How many trx does that make? 
How can this be implemented?
--> minimum signature is ~50 Bytes, prev trx = 32 Bytes + PKScript 20 Bytes plus, plus, plus... so a minimum trx is roughly 227 Bytes. This would limit to ~440 particular trx? And if a trx has many inputs and many outputs?

trx validation:
https://en.bitcoin.it/wiki/Protocol_rules#.22tx.22_messages
    Check syntactic correctness
    Make sure neither in or out lists are empty
    Size in bytes <= MAX_BLOCK_SIZE (or as above, 100k max?)
    Each output value, as well as the total, must be in legal money range
    Make sure none of the inputs have hash=0, n=-1 (coinbase transactions)
    Check that nLockTime <= INT_MAX[1], size in bytes >= 100[2], and sig opcount <= 2[3]
    Reject "nonstandard" transactions: scriptSig doing anything other than pushing numbers on the stack, or scriptPubkey not matching the two usual forms[4]
    Reject if we already have matching tx in the pool, or in a block in the main branch
    For each input, if the referenced output exists in any other tx in the pool, reject this transaction.[5]
    For each input, look in the main branch and the transaction pool to find the referenced output transaction. If the output transaction is missing for any input, this will be an orphan transaction. Add to the orphan transactions, if a matching transaction is not in there already.
    For each input, if the referenced output transaction is coinbase (i.e. only 1 input, with hash=0, n=-1), it must have at least COINBASE_MATURITY (100) confirmations; else reject this transaction
    For each input, if the referenced output does not exist (e.g. never existed or has already been spent), reject this transaction[6]
    Using the referenced output transactions to get input values, check that each input value, as well as the sum, are in legal money range
    Reject if the sum of input values < sum of output values
    Reject if transaction fee (defined as sum of input values minus sum of output values) would be too low to get into an empty block
    Verify the scriptPubKey accepts for each input; reject if any are bad
    Add to transaction pool[7]
    "Add to wallet if mine"
    Relay transaction to peers
    For each orphan transaction that uses this one as one of its inputs, run all these steps (including this one) recursively on that orphan


I22: 12Oct2016, svn:
====================
trx_create.sh - testcase 6: wenn er doch ins Netz geht, und die TRX mit '-t' holt,
kann er auch gleich checken, ob genug "input Satoshis" da sind, um den Transferbetrag und die TRXFEE zu bezahlen...

I24: 14Oct2016, svn:
====================
trx_create.sh - trxfee calculation:
# trx fees are calculated  with a trx fee per byte, which is changing...
# currently in Sep 2016 it is roughly 50 Satoshis per Byte. Exact length can only
# be determined during signing process, but here is a rough calc: each input
# requires later on a signature (length=70 Bytes/140 chars), which replaces
# the existing PKSCRIPT (length 25 Bytes, 50 chars). Each input must be signed,
# so roughly 90 chars signature are added. Normal 1 input one output P2PKH trx are
# roughly 227 Bytes ... THIS NEEDS FURTHER ANALYSIS !!!
--> need to get empirical data to improve math calculation, P2PKH is min 227 bytes, but P2SH can be much longer, and when SegWit and MerkleTrees come in, even much shorter.
--> when multi-input transactions are used, is the 50Satoshi/Bytes calc still true? What would a reasonable trxfee, if trx is 1000 Bytes?

I25: 17Oct2016, svn:
====================
if network is "on", then get the average last trx fee as proposal in the system... 
wget --no-check-certificate https://bitcoinfees.21.co/api/v1/fees/list
awk 'BEGIN { RS="},{"; OFS="\n" } { print $1 }' list | grep \"minDelay\":0,\"maxDelay\":0 | head -n1

or look here: https://blockchain.info/de/stats or https://api.blockchain.info/stats
divide total trx costs by amount of trx?
"total_fees_btc":7571592387
"n_tx":245576
= ~30000 Satoshis

I26: 19Oct2016, svn:
====================
start to think about a config file, having default values like:
min_trxfee=50
max_trx_size=100 # kilobytes
SIG_MIN_LENGTH_CHARS=18
SIG_MAX_LENGTH_CHARS=146
...

I27: 25Oct2016, svn:
====================
trx_sign.sh: 
STEP 5:  need to do a var_int check here ...
STEP 8:  need to do a var_int check here ...
STEP 17: when there is a trx with multiple output, need to create a loop


I28: 02Nov2016, svn:
====================
when tmp_urtx.txt file is missing, then wrong reply by sign script:
./tcls_sign.sh -f tmp_urtx.txt -w XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXQPcN4 -p 03cc5debc62369bd861900b167bc6add5f1a6249bdab4146d5ce698879988dced0
######################################################
### trx_sign.sh: sign an unsigned, raw Bitcoin trx ###
######################################################
cat: tmp_urtx.txt: No such file or directory
*** Error: unsigned raw transaction normally begins with Version '01000000'
           here we have . Please adjust, and try again. 
           Exiting gracefully


I29: 02Nov2016, svn:
====================
naming convention(s): 
Bitcoin talks about (unsigned) raw transactions. This word raw is often used (e.g. in the pizza tranasaction) as an indicator for files (pizza.raw), which contain only hex data. So this file cannot be printed easily, you need to use 'xxd' or 'hexdump'. So effectivly the file is a hexadecimal file, not a raw file...
NAMING CONVENTION:
--> 1: files, which need 'xxd' or 'hexdump' need to end with ".hex" (not raw)
--> 2: files that can be displayed with 'cat' shall have the extension ".txt"
--> 3: avoid usage of extension ".raw"
this needs to be inmplemented into tcls_create.sh, tcls_sign.sh and tcls_verify_sig.sh
(and later into all other files)
--> script "trx_2txt.sh" has a switch "-r" - this needs to get replaced as well!


I30: 04Nov2016, svn:
====================
Integrate the PIZZA Transaction into all testcases:
https://blockchain.info/rawtx/cca7507897abc89628f450e8b1e0c6fca4ec3f7b34cccf55f3f531c659ff4d79
http://bitcoin.stackexchange.com/questions/32305/how-does-the-ecdsa-verification-algorithm-work-during-transaction/32308#32308

testcases_trx_2txt.sh
? testcases_tcls_create.sh - it has two outputs, not yet ready ...
? testcases_tcls_sign.sh   - I don't have the priv keys, how to?
testcases_tcls_verify_sig.sh	


I31: 05Nov2016, svn:
====================
remove the word "raw" from trx_2txt.sh. A raw transaction is simply an unsigned, text readable set of hexchars? see also I29. See also in this help text line:
usage: ./trx_2txt.sh [-h|-r|-t|-u|-v|-vv] [[raw]trx][...]
need to search and replace in whole file.


I32: 05Nov2016, svn:
====================
trx_2txt.sh does not recognize output script correctly, see testcase 12b:
TX_OUT COUNT, hex=01, decimal=1
TX_OUT[0]
 TX_OUT[0] Value (uint64_t)
  hex=A0BB0D0000000000, reversed_hex=00000000000DBBA0, dec=900000, bitcoin=0.00900000
 TX_OUT[0] PK_Script Length (var_int)
  hex=0119, dec=281
 TX_OUT[0] pk_script (uchar[])

     51: OP_1, OP_TRUE
    4C: unknown opcode 
    21: OP_Data33
        02323C909B017748:294C1D1FB82648B2
        C2905CD941D9A863:E036B3157E8AA85D
        D3
    53: unknown opcode 
   02323C909B017748294C1D1FB82648B2C2905CD941D9A863E036B3157E8AA85DD3
  and translates base58 encoded into this bitcoin address:
   15GcaaL7edMsqQnKEviqqmmsb4ibskZUjkSsCNf3mmku8PCdvsb
 
 LOCK_TIME
00000000


I32: 05Nov2016, svn:
====================
is this missing in sign.sh or key2pem.sh?
https://github.com/KittehOrg/KittehIRCClientLib/issues/45
compressed/uncompressed pubkeys (begin with 0x02 or 0x03):
Example 1, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:aa:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e0:
  41:ba:3e:21:6d
Find last byte from Y co-ordinate, LSB is set:
0x6D (to binary) => 0b1101101 (extracting LSB) => 0b00000011 
Compressed form of above needs to start with 0x03:
  03:3d:b3:20:74:a1:91:b2:d7:e7:cc:8e:5d:b3:2c:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3

Example 2, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:27:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e2:
  f1:ba:2b:31:a6
Find last byte from Y co-ordinate, LSB is not set:
0xA6 => 0b10100110 => 0b00000010 
Compressed form of above needs to start with 0x02:
  02:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51



I33: 08Nov2016, svn:
====================
tcls_sign.sh (and others): TRX_IN[i] shall always start with "0", like in script trx_2txt.sh


I34: 09Nov2016, svn:
====================
update readme.md files and description and usage …


I35: 10Nov2016, svn:
====================
there is something wrong with the calculation of fees, see this example:
lorena:/Data/BitCoin/trx_cl_suite $ ./tcls_create.sh -v -f ../svn_4inputs.txt 820000 13GnHB51piDBf1avocPL7tSKLugK4F7U2B 34
###########################################################################
### amount(tx_in) - amount(tx_out) = TRXFEEs. *Double check YOUR MATH!* ###
### amount of trx input(s) (in Satoshis):                        853000 ###
### desired amount to spend (in Satoshis):                       820000 ###
### proposed TRXFEE (@ 34 Satoshi/Byte * 985 trx_bytes):          33490 ###
### *** possible value to return address:                            54 ###
### *** without return address, trxfee will be:                   33000 ###
###########################################################################
proposed trx fees are higher than remaining amount (33000). What?

I36: 10nov2016, svn:
====================
tcls_sign.sh: using 4inputs, and verifying output in Electrum is ok, but when bradcasting, this error appears:
error: The transaction was rejected by network rules.(16: mandatory-script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element))

I37: 10nov2016, svn:
====================
tcls_sign.sh: using 4inputs...
Verify with Electrum, if the script is uncorrect, everytime when the signture has an S-Value not smaller than N/2. 
It looks like Electrum shows these tx as not green. This would mean, using the opposite S-Value "destroys" the link between sig, double sha256 and pubkey?


I37: 13nov2016, svn:
====================
trx_2txt.sh: this signature in a tcls_create.sh and tcls_sign.sh generated trx creates problems in bitcoin qt, and cannot be "pushtx'd" then. It looks like the changed S-Values create a problem. Need to compare to Electrum generated signing, or eventually do a test in bitcoin qt...
  493045022100D6DF255B4C7671BED184C964E0C53FAD4B2B53013DC986244028948A7EA7621502201CC01171011C43F1D1672EBC209D1893E42B158E1DFB71A7118669D9ABA23E10012103CC5DEBC62369BD861900B167BC6ADD5F1A6249BDAB4146D5CE698879988DCED0 
  ##################################################################
  ### trx_in_sig_script.sh: decode SIG_script OPCODES from a trx ###
  ##################################################################
    49: OP_DATA_0x49:     push hex 49 (decimal 73) bytes as data
    30: OP_SEQUENCE_0x30: type tag indicating SEQUENCE, begin sigscript
    45: unknown opcode 
    02: unknown OpCode
        2100D6DF255B4C76:71BED184C964E0C5
        3FAD4B2B53013DC9:86244028948A7EA7
        621502201CC01171:011C43F1D1672EBC
        209D1893E42B158E:1DFB71A7118669D9
        ABA23E10012103CC:5DEBC62369BD8619
        00B167BC6ADD5F1A:6249BDAB4146D5CE
        698879988DCED0:
take also a look at trx_in_script_sig.sh and it's png pictures...
I have seen "483045022100...", but never "493045022100...", e.g.:
4830450221009A559CE3CEE7C7106BDB45E6CBF51F5B008FD91D03947AD9578EAFA346BEB2290220797E31F9365EB11BE3476A7F9E53B9A8E95C904C1A169CF83ED09B37EF5A4D17012103CC5DEBC62369BD861900B167BC6ADD5F1A6249BDAB4146D5CE698879988DCED0




 

#####################################
### Extensions / new Requirements ###
#####################################
E1: Testnet
===============
can it be extended for usage in testnet?

E2: MultiSig
===============
For important values: make use of a 2of3 multisig with one in cold storage
generate 3 addresses (and 3 private keys) A, B & C... and 
create 1 multisig address (D) using those 3 in a 2-of-3 configuration

the multisig address starts with a "3", all the others (A,B & C) should be "1". 
send funds into the multisig address D (starts with a "3")... 
make sure all the private keys for your A, B & C addresses are all backed up/stored independently of each other. 
to take funds out of D, create a transaction using one of A,B or C.. and then co-sign the transaction using one of the other addresses.

E3: Sending
===============
can a signed trx be sent to the net without tools?
--> https://bitcointalk.org/index.php?topic=1043518.0
curl -X POST -d tx=010000000158891e8f28100642464417f53845c3953a43e31b35d061bdbf6ca3a64fffabb8000000008c493046022100a9d501a6f59c45a24e65e5030903cfd80ba33910f24d6a505961d64fa5042b4f02210089fa7cc00ab2b5fc15499fa259a057e6d0911d4e849f1720cc6bc58e941fe7e20141041a2756dd506e45a1142c7f7f03ae9d3d9954f8543f4c3ca56f025df66f1afcba6086cec8d4135cbb5f5f1d731f25ba0884fc06945c9bbf69b9b543ca91866e79ffffffff01204e0000000000001976a914d04b020dab70a7dd7055db3bbc70d27c1b25a99c88ac00000000 https://blockchain.info/pushtx

