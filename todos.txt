#####################################
### Issues / errors in processing ###
#####################################

I19: 09Oct2016, svn:
====================
I think the maximum size of a trx is 100 kb. How many trx does that make? 
How can this be implemented?
--> minimum signature is ~50 Bytes, prev trx = 32 Bytes + PKScript 20 Bytes plus, plus, plus... so a minimum trx is roughly 227 Bytes. This would limit to ~440 particular trx? And if a trx has many inputs and many outputs?

trx validation:
https://en.bitcoin.it/wiki/Protocol_rules#.22tx.22_messages
    Check syntactic correctness
    Make sure neither in or out lists are empty
    Size in bytes <= MAX_BLOCK_SIZE (or as above, 100k max?)
    Each output value, as well as the total, must be in legal money range
    Make sure none of the inputs have hash=0, n=-1 (coinbase transactions)
    Check that nLockTime <= INT_MAX[1], size in bytes >= 100[2], and sig opcount <= 2[3]
    Reject "nonstandard" transactions: scriptSig doing anything other than pushing numbers on the stack, or scriptPubkey not matching the two usual forms[4]
    Reject if we already have matching tx in the pool, or in a block in the main branch
    For each input, if the referenced output exists in any other tx in the pool, reject this transaction.[5]
    For each input, look in the main branch and the transaction pool to find the referenced output transaction. If the output transaction is missing for any input, this will be an orphan transaction. Add to the orphan transactions, if a matching transaction is not in there already.
    For each input, if the referenced output transaction is coinbase (i.e. only 1 input, with hash=0, n=-1), it must have at least COINBASE_MATURITY (100) confirmations; else reject this transaction
    For each input, if the referenced output does not exist (e.g. never existed or has already been spent), reject this transaction[6]
    Using the referenced output transactions to get input values, check that each input value, as well as the sum, are in legal money range
    Reject if the sum of input values < sum of output values
    Reject if transaction fee (defined as sum of input values minus sum of output values) would be too low to get into an empty block
    Verify the scriptPubKey accepts for each input; reject if any are bad
    Add to transaction pool[7]
    "Add to wallet if mine"
    Relay transaction to peers
    For each orphan transaction that uses this one as one of its inputs, run all these steps (including this one) recursively on that orphan

and here from Andreas book in chapter 8:
Each node verifies every transaction against a long checklist of criteria:

    The transaction’s syntax and data structure must be correct.
    Neither lists of inputs or outputs are empty.
    The transaction size in bytes is less than MAX_BLOCK_SIZE.
    Each output value, as well as the total, must be within the allowed range of values (less than 21m coins, more than 0).
    None of the inputs have hash=0, N=–1 (coinbase transactions should not be relayed).
    nLockTime is less than or equal to INT_MAX.
    The transaction size in bytes is greater than or equal to 100.
    The number of signature operations contained in the transaction is less than the signature operation limit.
    The unlocking script (scriptSig) can only push numbers on the stack, and the locking script (scriptPubkey) must match isStandard forms (this rejects "nonstandard" transactions).
    A matching transaction in the pool, or in a block in the main branch, must exist.
    For each input, if the referenced output exists in any other transaction in the pool, the transaction must be rejected.
    For each input, look in the main branch and the transaction pool to find the referenced output transaction. If the output transaction is missing for any input, this will be an orphan transaction. Add to the orphan transactions pool, if a matching transaction is not already in the pool.
    For each input, if the referenced output transaction is a coinbase output, it must have at least COINBASE_MATURITY (100) confirmations.
    For each input, the referenced output must exist and cannot already be spent.
    Using the referenced output transactions to get input values, check that each input value, as well as the sum, are in the allowed range of values (less than 21m coins, more than 0).
    Reject if the sum of input values is less than sum of output values.
    Reject if transaction fee would be too low to get into an empty block.
    The unlocking scripts for each input must validate against the corresponding output locking scripts.


I26: 19Oct2016, svn:
====================
use a config file, having default values like:
min_trxfee=50
max_trx_size=100 # kilobytes
SIG_MIN_LENGTH_CHARS=18
SIG_MAX_LENGTH_CHARS=146
...
--> apr2017: already in use for tcls_create.sh

I33: 05Nov2016, svn:
====================
tcls_sign.sh or tcls_key2pem.sh: is this missing ?
https://github.com/KittehOrg/KittehIRCClientLib/issues/45
compressed/uncompressed pubkeys (begin with 0x02 or 0x03):
Example 1, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:aa:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e0:
  41:ba:3e:21:6d
Find last byte from Y co-ordinate, LSB is set:
0x6D (to binary) => 0b1101101 (extracting LSB) => 0b00000011 
Compressed form of above needs to start with 0x03:
  03:3d:b3:20:74:a1:91:b2:d7:e7:cc:8e:5d:b3:2c:
  78:0d:a1:9d:76:77:2f:a6:d3:4b:52:b9:dd:7d:fe:
  b1:0c:a3

Example 2, an uncompressed pubkey (0x04):
  04:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51:1b:22:b9:f5:8a:8c:2d:24:08:5b:47:27:
  b5:c6:c8:06:2d:52:de:ee:b4:1f:b2:37:1d:fa:e2:
  f1:ba:2b:31:a6
Find last byte from Y co-ordinate, LSB is not set:
0xA6 => 0b10100110 => 0b00000010 
Compressed form of above needs to start with 0x02:
  02:d5:a7:69:89:89:7e:e6:72:fd:4a:2f:20:88:c7:
  a2:fd:ab:eb:a4:79:01:e5:48:b4:74:cb:0a:df:af:
  06:46:51


I38: 16nov2016, svn:
====================
tcls_key2pem: the assembly of the pubkey can be made very easy, in this section:
######################################
### manually setup a second pubkey ### 
######################################

instead of base64, use openssl:
   openssl enc -base64 -in tmp_key2pem >> pubkey_m.pem
this?
   xxd -r -p <pubkey.txt | openssl pkey -pubin -inform der >pubkey.pem
without xxd it might become slightly different...
   cat pubkey.hex | openssl pkey -pubin -inform der >pubkey.pem


I39: 16nov2016, svn:
====================
Gerade in Schleifen sind immer neu gestartete Unterprozesse für jede Menge Ressourcenverbrauch verantwortlich. Ein kurzer Benchmark durchsuchte knapp 3 300 Dateien nach einem Suchstring. Die Variante in Listing 2 braucht daher 3 300 Prozesse mehr als die kürzere Variante in Listing 3. Das zweite Skript benötigte 88 Prozent mehr Laufzeit als das erste. Hängt man hinten an die Pipe ein weiteres, nutzloses »| cat« an, so dauert dies 153 Prozent länger als ein einzelnes »grep«. Zwei solche Aufrufe benötigen schon zusätzliche 239 Prozent und dreimal »cat« schlägt mit einer Zugabe von gesalzenen 322 Prozent zu Buche. Die letzteren Werte leiden überdurchschnittlich an den begrenzten Ressourcen auf dem Testrechner und lasten ihn vollständig aus. Dennoch zeigt das durchaus praxisnahe Beispiel, dass sich zusätzliche Prozesse erheblich im Schleifenrumpf auswirken.

Listing 2: Suche mit »cat«
01 #!/bin/bash
02 find $HOME/Artikel/2009/1* -type f |
03 while read i
04 do
05     cat "$i" | grep bashing > /dev/null
06 done

Listing 3: Suche ohne »cat«
01 #!/bin/bash
02 find $HOME/Artikel/2009/1* -type f |
03 while read i
04 do
05     grep bashing "$i" > /dev/null
06 done


I40: 16nov2016, svn:
====================
tcls_key2pem: we are currently checking only negative S-values, the original bitcoin cpp code (master/src/script/interpreter.cpp) avoids negative numbers for R and S. 
--> need to add negative R-Check as well ...


I41: 14dec2016, svn:
====================
tcls_*.sh:
it is generally not a good idea, to have capital letters as variable names in shell scripts. They might interfere with shell variables! 
Maybe rework all *.sh files - low priority...


I42: 16nov2016, svn:
====================
make a copy of wallet and priv keys from SuSE cold and from Mac Bitcoin client into new virtual machine, to see that copying of wallets works well ...


I43: 20dec2016, svn:
====================
tcls_create.sh: 
### TX_IN: call STEP 3-7 ###
...
# if only prev_TX is given, we could fetch remaining items with 'get_trx_values' ?
--> assume we have -f and -t, then we can read values from network?   


I44: 25dec2016, svn:
====================
tcls_base58check_enc.sh
add testcase file for all testcases in the file "Address_Generation_Test.txt" in the Bitcoin directory. Each line is a step of the key conversion, beginning with priv key, then pubkey, then sha and so on... until base58 encoded Bitcoin address... like this:
./tcls_base58check_enc.sh -v -p2pk 047747ECECEB2C6692D6CEAAF4A11ED9DB900741730C201F95B8A4EEF20D7DEE2CDEC2802C6EDC880BEE41E9D114A8708260D01AB107B5177DECB4E109C5479223 | grep "^ " | tail -n 9


I45: 26dec2016, svn:
====================
tcls_sign.sh
add some testcases based on priv keys from file "Address_Generation_Test.txt" in the Bitcoin directory. The  file contains priv and pub keys ... 


I46: 04jan2017, svn:
====================
Can I build a transaction review of prev trx? The tree looks like this (left to right):

prev trx      TRX2          TRX1       my wallet
=================================================
Input 1 \
Input 2 ----- UTXO --\
Input 3 /             \
                       ---- UTX0 ----> 1JBM...68m 
                      /
Input 4 ----- UTXO --/


I47: 20mar2017, svn:
====================
beautify output of tcls_trx2txt.sh: similiar to the way, the tree output is done in the "dot profile" alias:
alias tree="find ./ -print | sed -e 's;[^/]*/; /;g;s;/ ;    ;g;s;^ /$;.;;s; /;|-- ;g'"


I49: 27mar2017, svn:
====================
maybe an idea for the future:
A high level algorithm for processing payments on a website via RPC/cli

Say, I'll have a python script. Do I understand correctly, that I'll have to call these:
1) getnewaddress
2) getreceivedbyaddress
That is, I won't need the "gettransaction" and "listreceivedbyaddress" calls.

Getnewaddress sounds sensible and I use that too.
I use bitcoin.conf notifications to trigger the events however to later query the values using getTransaction
e.g. when a new tx arrives it runs the script to make sure I'm aware there are incoming funds.
When a new block is found it verifies the confirmations of those tx's to know if we can be sure it has been received safely.
TX malleability is something to be aware of though, it's what I lose sleep over because I'm not sure how to easily test this.
Your approach with get received by address is probably fine, keep us posted how it goes.
Triggers: There are two options blocknotify and wallet notify I think it is. You can put a shell command as a parameter to invoke php, node or python script.

---> no, for a webpage with an address it is better to use HD wallets: 
Hierarchical Deterministic Wallets (BIP0032/BIP0044)
q: how many public/private keypairs can a 24 word hierarchical deterministic wallet produce?
a: 2^31, the number of words in the mnemonic has nothing to do with the capacity, it just adjusts the entropy for the key derivation


I51: 02apr2017, svn: - done
====================
testcases_tcls_verify_sig.sh: on OpenBSD the testcase 4 fails ...


I52: 03apr2017, svn:
====================
tcls_sign.sh: is TX_OUT handled correctly? Looks like there is only one TX_OUT possible?
what happens, when we create a TX, which has a return address?
what happens, when we create a TX, which has many TX-OUTs?


I55: 07apr2017, svn:
====================
testcases_tcls_sign.sh: 
Testcase 10i (?) in testcases_tcls_create.sh shall be reflected in "tcls_sign.sh", with the same input values, and then signed. The example to compare is here:
    https://gist.githubusercontent.com/gavinandresen/3966071/raw/
    1f6cfa4208bc82ee5039876b4f065a705ce64df7/TwoOfThree.sh



I56: 23jun2017, svn:
====================
tcls_sign.sh: when a tx has more than 100 utxo, the signing process creates an error roughly every 2nd attempt. Looks like this happens for signatures, where a new S-Value must be calculated. The new S-value should be less then N/2. The system creates a new S value, but it's length is then 63 bytes, instead of 64 bytes.


I57: 27jun2017, svn: - done
====================
OpenBSD and ./tcls_testcases_verify.sh
TESTCASE 4:
./tcls_testcases_verify.sh[234]: xxd: not found
unable to load Public Key
./tcls_testcases_verify.sh[234]: xxd: not found
./tcls_testcases_verify.sh[234]: xxd: not found
unable to load Public Key
Error initializing context


I58: 20jul2017, svn:
====================
P2SH scripts - length limitations:
https://bitcoin.stackexchange.com/questions/38937/what-was-the-original-rationale-for-limiting-the-maximum-push-size


I61: tcls_testcases for OP_RETURN
=================================
https://blockchain.info/tx/52dd20f60d6e14e5a783e7668cf410efdea40cd9a92479b0f2423d0bc63575fa?format=hex
010000000497d674af7ee7ff260c97ea49b7e56af223b23b40c129d48dbc06f7699b8c0c10000000006a47304402200914ca252b405e15b6a8f851e7aa5f06c05c1fc45ec2ab689a5c51533ed9d24102203de2eaf764d9ab3e0be57fdfcd22b558ff4f97aa8360fc9fad66c6abb91e31fc01210346da7048693f5298ea25302b23fd055f398f7b75c8acf0ab14969626abfc5f65fdffffffe22c4ef49bc6ee2ba1796d830bf879aa097c1809d50bb85af9113ee0b77a1aae010000006b483045022100c2e495935d52d466e80f0e6e93a38e4894a4f5a460a6488067d335bd236bd454022035f6d6f563fa820861d5cbc121ad2c2a744579465bc40f23b9afb4ca0af63d820121032dfe039d446aad7bee4618b0901ca95ae2175341109c544c46e445cfbb4ccbebfdffffff13144a1b23e73d4ed199b088e32669ca6095ee5e69c8df79d467b57d63c480f4000000006a4730440220652a21b3b7a23c9e531cc402d931c0638acfcbcb9d37b4a337c1eeb17c497f6d022075e5c5d5889ac20904723dc577fe9e3bcff2318bf73756b50c202c36ae197edc0121020e79e918da434349d8d23833ee86602ac67876707c99d8e0d0b02d45ac743542fdfffffff4fec9407cac82d9af986086c58f8dba08ad31f830f4fa54b87f4df877748db6000000006a47304402206270cd4cbd03ab14b5e652ed166afefb2036060e6473072720e27a4e7ca1119e022001c1cd35e6abae76ddaee19a1a94c7536723c6756f0e7903270a60c5e5dda55c0121024dc7a33dd3e4bc7677cabc456fbdc12775cd935d8823ccea1df4cf9aa2420668fdffffff0300000000000000000a6a084655434b20544544c0c6aa00000000001976a9145e23945aba9037f323717057cb91e7d8c37793b688acebec0c00000000001976a91456e526ec441f466a7a3ef46dab98e9dcc05b89b088ac00000000

https://blockchain.info/tx/728e24b2e7dd137e574c433a8db08ac2aa0bf0588ad7716e4c5a7da45dbb5933?format=hex
010000000152297af618c1450d0f521d6b11e71a7879d0b387b9d6344bc92822ac6c58562b010000006a473044022049e517546b4c839f9d4d9db74d3e86400273bc95b484c50f5e896e4470752c50022034e58bceab2dbf45dd2b4dcca7c1bdd6e603beac59fe6e60bff12d35f4f0f7aa01210252bc988a7ae4d13339946ecad63bc492badb869e7e0307b864eed7941b8b5119fdffffff0200000000000000004c6a4a40434f5059524f424f4037333839643664313135313465633035636335663135656236353932383630383430343733346230343932636132656364396564343837326230343265666137d10d0a00000000001976a914aa6b881fa1c7f6dbc95d714bfd5100bf56bb940388ac00000000

https://blockchain.info/tx/d276abe15791941649c3ca8425d79167cc1cf801f83aa99753fe7f42740c0f23?format=hex
0100000001d0e67013c4c8512cb7e4cfbb64bcea38d854cab6db36b6af0113109ce489ee7201000000fdfd000048304502210096df80136e578ce721589d61cb2efcf5e4748c6a3a6ab7e34d0fc12e3e748e2c02201049e22331794a5d99856105b096e3adb60b053562ad40ef6fe28b8bb70ca8f40147304402203f49e5198e7b14aeb59c26dc42a4207ede9d0d4a291e2ae6f2eb1809fbdba21a022030e74e63e752296499e18f772e00d26c206972029f3b8c0b7d50298a1734241f014c69522103459d20315debcb8b4c47c5f0ff356c7764ea3b103487487a1ed2bbcac3f18bc221023b0fd344dbd13d25663adc5a31d269ceac90b6dfc3ac8af8d5b31aa10ba366fc21032233fc2b5916568cd5177e9b88feda049195418cbadb2c6741e8df8967ec84ab53aeffffffff030000000000000000106a0e69643a64616e6f6d6172722e69647c150000000000001976a9146ada8b2f3ce136abedd949e749ccf5574d867d5b88ac557d0c000000000017a9148e1719fb937c598ddd0760118b5455fc4f31891b8700000000


I62: tcls_create.sh
===================
https://www.reddit.com/r/Bitcoin/comments/74375h/i_have_a_p2sh_multisig_redeem_script_that_is_over/
multisig must not be over 520 bytes


I63: tcls_create.sh
===================
when in Africa, the curl call cannot go through. See:
https://bitcoin.stackexchange.com/questions/60296/getting-current-bitcoin-fees-from-command-line
include a switch that goes around usage of bitcoinfees.21.co
and set a default value? 
or ask user to provide s.th.?


I64: tcls_create.sh
===================
possible extension/thoughts for cold storage:
Create multi-sig wallet offline

Goal: Never expose private keys to the internet.

    Go offline
    Format 2 USB devices
    Save portable Linux distro to one USB device and Chrome, Copay, Ledger to other device
    Start computer using portable Linux distro
    Install applications
    Remove the USB devices from the computer
    Create a 2/4 multisig wallet.
    Choose 2 people that I trust wont collude
    Save 1 key on a Ledger device for a trusted person
    Save 1 key on a Ledger device for another trusted person
    Save 1 key on Ledger device for me
    Write down the last key on paper

Dead man's switch

Goal: If any two people lose access to their devices or die simultaneously, access to the coins is not lost

Goal: If one person loses their key, is a victim of theft or goes rouge, the coins are not lost.

    Setup a server that holds the private key I wrote down on paper.
    Discard the paper I wrote the private key to.
    Instruct the server to listen from pings with a certain signature and count the time since the last ping.
    Run an application every time I start my computer that pings the server.
    Instruct the server to sms me a warning if it has not been pinged for 1 month.
    Instruct the server to sms me the private key if it has not been pinged for 2 month.
    Instruct the server to sms the truster persons the private key if it has not been pinged for 3 month.

I65: 10min tx:
==============
based on an article here:
https://www.reddit.com/r/Bitcoin/comments/3yulwv/any_examples_of_the_10_minute_script_thats_a/
this tx can knock down nodes...
what about mine? It is in the file "tcls_10min_tx.txt"


I66: bitcoin fees:
==================
As for formulas, if you use standard addresses (not P2SH), the formula is:

fee = (n_inputs * 148 + n_outputs * 34 + 10) * price_per_byte

SegWit slightly changes this, where instead of paying per byte, you pay per unit of weight: 1 byte of non witness data = 4 weight, 1 byte of witness data = 1 weight. 


I67b: signature for P2SH:
========================
is this realized correctly in tcls_sign.sh?
https://bitcoin.stackexchange.com/questions/60468/signature-scheme-for-p2sh


I68: signature for signing...
==============================
is this realized correctly in tcls_sign.sh?
https://bitcoin.stackexchange.com/questions/57848/how-to-tell-which-part-of-the-previous-tx-i-need-to-make-the-hash-to-sign-for-an/57866#57866


I70: Multisig & Segwit:
=======================
integrate contents of file "160905_Multisig_Segwit.txt" into tx_cl_suite


I72: hex values, xxd, and shell scripts - done
=======================================
see also item 57 above ...

https://bitcoin.stackexchange.com/questions/55188/download-single-and-specific-block-for-study-purposes/55206?noredirect=1#comment70179_55206

 cat myfile_with_hexchars | tr [:upper:] [:lower:] > myfile_with_hexcodes
 result=$( cat myfile_with_hexcodes | sed 's/[[:xdigit:]]\{2\}/\\x&/g' )
 printf $result > myfile_hex

you don't need the tr; [:xdigit:] and printf \x handle both cases. In fact this only works right if the input is entirely hex pairs so you can just do printf $(sed 's/../\\&/g' <hexfile) >outfile


#####################################
### Extensions / new Requirements ###
#####################################
E1: Testnet
===============
can it be extended for usage in testnet?

E2: MultiSig
===============
For important values: make use of a 2of3 multisig with one in cold storage
generate 3 addresses (and 3 private keys) A, B & C... and 
create 1 multisig address (D) using those 3 in a 2-of-3 configuration

the multisig address starts with a "3", all the others (A,B & C) should be "1". 
send funds into the multisig address D (starts with a "3")... 
make sure all the private keys for your A, B & C addresses are all backed up/stored independently of each other. 
to take funds out of D, create a transaction using one of A,B or C.. and then co-sign the transaction using one of the other addresses.

file:///Data/BitCoin/Bitcoin_multisig_the_hard_way_P2SH.html


E3: Sending
===============
can a signed trx be sent to the net without tools?
--> https://bitcointalk.org/index.php?topic=1043518.0
curl -X POST -d tx=010000000158891e8f28100642464417f53845c3953a43e31b35d061bdbf6ca3a64fffabb8000000008c493046022100a9d501a6f59c45a24e65e5030903cfd80ba33910f24d6a505961d64fa5042b4f02210089fa7cc00ab2b5fc15499fa259a057e6d0911d4e849f1720cc6bc58e941fe7e20141041a2756dd506e45a1142c7f7f03ae9d3d9954f8543f4c3ca56f025df66f1afcba6086cec8d4135cbb5f5f1d731f25ba0884fc06945c9bbf69b9b543ca91866e79ffffffff01204e0000000000001976a914d04b020dab70a7dd7055db3bbc70d27c1b25a99c88ac00000000 https://blockchain.info/pushtx
also:
https://github.com/laanwj/bitcoin-submittx


E4: creating priv/pub keypairs
===============================
create a priv/pubkey pair using arcrandom on OpenBSD?
similiar to "bitcoin_tools.sh" ?


E5: Steganography
=================
http://incoherency.co.uk/blog/stories/steganographic-bitcoin-seeds.html


E6: BIP39
=========
https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki

E7: SEGWIT
==========
a:) be able to read and decode segwit tx
b:) make the "wallet" segwit compliant:
https://bitcoincore.org/en/segwit_wallet_dev/



