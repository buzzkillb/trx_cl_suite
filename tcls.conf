# config file for tcls scripts.
# 
# Copyright (c) 2017 Volker Nowarra 
# 
# Version by      date    comment
# 0.1	  svn     13mar17 initial release 
# 
# Permission to use, copy, modify, and distribute this software for any 
# purpose with or without fee is hereby granted, provided that the above 
# copyright notice and this permission notice appear in all copies. 
# 
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER 
# RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE 
# USE OR PERFORMANCE OF THIS SOFTWARE. 
# 
#

typeset -i txfee_per_byte=50    # tx fee calculation
max_trx_size=100                # kilobytes
SIG_MIN_LENGTH_CHARS=18
SIG_MAX_LENGTH_CHARS=146

# Multisig: (April 2017)
# validity rules require that the P2SH redeem script is at most 520 bytes.
# As the redeem script is [m pubkey1 pubkey2 ... n OP_CHECKMULTISIG], it
# follows that the length of all public keys together plus the number of
# public keys must not be over 517. Usually sigs are 73 chars:
#   For compressed public keys, this means up to n=15
#     m*73 + n*34 <= 496 (up to 1-of-12, 2-of-10, 3-of-8 or 4-of-6).
#   For uncompressed ones, up to n=7
#     m*73 + n*66 <= 496 (up to 1-of-6, 2-of-5, 3-of-4).
#
msig_redeemscript_maxlen=520
msig_max_uncompressed_keys=7
msig_max_compressed_keys=15

# OpCodes:
opcode_numericis_offset=80    # for conversion form decimal to opcode (OP_1 - OP_16)

OP_0="00"                   # An empty array of bytes is pushed onto the stack
OP_FALSE="00"               # An empty array of bytes is pushed onto the stack
OP_NA="01-4b"               # The next opcode bytes is data to be pushed onto the stack 

OP_PUSHDATA1="4c"           # next byte: number of bytes to be pushed onto the stack 
OP_PUSHDATA2="4d"           # next two bytes: number of bytes to be pushed onto the stack 
OP_PUSHDATA4="4e"           # next four bytes: number of bytes to be pushed onto the stack
OP_1NEGATE="4f"             # The number -1 is pushed onto the stack. 

OP_RESERVED="50"            # tx is invalid unless occuring in an unexecuted OP_IF branch 
OP_TRUE="51"                # The number 1 is pushed onto the stack. 
OP_1="51"                   # The number 1 is pushed onto the stack. 
OP_2="52"                   # The number 2 is pushed onto the stack. 
OP_3="53"                   # The number 3 is pushed onto the stack. 
OP_4="54"                   # The number 4 is pushed onto the stack. 
OP_5="55"                   # The number 5 is pushed onto the stack. 
OP_6="56"                   # The number 6 is pushed onto the stack. 
OP_7="57"                   # The number 7 is pushed onto the stack. 
OP_8="58"                   # The number 8 is pushed onto the stack. 
OP_9="59"                   # The number 9 is pushed onto the stack. 
OP_10="5a"                  # The number 10 is pushed onto the stack. 
OP_11="5b"                  # The number 11 is pushed onto the stack. 
OP_12="5c"                  # The number 12 is pushed onto the stack. 
OP_13="5d"                  # The number 13 is pushed onto the stack. 
OP_14="5e"                  # The number 14 is pushed onto the stack. 
OP_15="5f"                  # The number 15 is pushed onto the stack. 
OP_16="60"                  # The number 16 is pushed onto the stack. 
OP_NOP="61"                 # Does nothing
OP_IF="63"                  # <expression> if [statements] [else [statements]]* endif 
OP_NOTIF="64"               # <expression> notif [statements] [else [statements]]* endif 
OP_ELSE="67"                # <expression> if [statements] [else [statements]]* endif 
OP_ENDIF="68"               # <expression> if [statements] [else [statements]]* endif 
OP_VERIFY="69"              # Marks transaction as invalid if top stack value is not true. 
OP_RETURN="6a"              # Marks transaction as invalid...
OP_DEPTH="74"               # Puts the number of stack items onto the stack. 
OP_DROP="75"                # Removes the top stack item. 
OP_DUP="76"                 # Duplicates the top stack item. 
OP_EQUAL="87"               # Returns 1 if the inputs are exactly equal, 0 otherwise. 
OP_EQUALVERIFY="88"         # Same as OP_EQUAL, but runs OP_VERIFY afterward. 
OP_RIPEMD160="a6"	      # The input is hashed using RIPEMD-160. 
OP_SHA1="a7"	              # The input is hashed using SHA-1. 
OP_SHA256="a8"	      # The input is hashed using SHA-256. 
OP_HASH160="a9"	      # The input is first hashed with SHA-256, then with RIPEMD-160
OP_HASH256="aa"	      # The input is hashed two times with SHA-256 
OP_CODESEPARATOR="ab"	      # used with signature checking 
OP_CHECKSIG="ac"	      # The entire transaction's outputs, inputs, and script are hashed
OP_CHECKSIGVERIFY="ad"      # Same as OP_CHECKSIG, but OP_VERIFY is executed afterward 
OP_CHECKMULTISIG="ae"       # Compares first sig against each pubkey until an ECDSA match
OP_CHECKMULTISIGVERIFY="af" # Same as OP_CHECKMULTISIG, but OP_VERIFY is executed afterward 
OP_CHECKLOCKTIMEVERIFY="b1" # Marks tx invalid if top stack item is greater than tx's 
                            # nLockTime field, otherwise script evaluation continues as though
                            # an OP_NOP was executed. 
OP_CHECKSEQUENCEVERIFY="b2" # Marks tx as invalid if relative lock time of input 
                            # (enforced by BIP 0068 with nSequence) is not equal to or 
                            # longer than the value of the top stack item

